/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mycompany.sertest.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleThriftStruct implements org.apache.thrift.TBase<SimpleThriftStruct, SimpleThriftStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleThriftStruct");

  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("someId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleThriftStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleThriftStructTupleSchemeFactory());
  }

  private long parentId; // required
  private String message; // required
  private long someId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_ID((short)1, "parentId"),
    MESSAGE((short)2, "message"),
    SOME_ID((short)3, "someId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_ID
          return PARENT_ID;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // SOME_ID
          return SOME_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENTID_ISSET_ID = 0;
  private static final int __SOMEID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOME_ID, new org.apache.thrift.meta_data.FieldMetaData("someId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleThriftStruct.class, metaDataMap);
  }

  public SimpleThriftStruct() {
  }

  public SimpleThriftStruct(
    long parentId,
    String message,
    long someId)
  {
    this();
    this.parentId = parentId;
    set_parentId_isSet(true);
    this.message = message;
    this.someId = someId;
    set_someId_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleThriftStruct(SimpleThriftStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.parentId = other.parentId;
    if (other.is_set_message()) {
      this.message = other.message;
    }
    this.someId = other.someId;
  }

  public SimpleThriftStruct deepCopy() {
    return new SimpleThriftStruct(this);
  }

  @Override
  public void clear() {
    set_parentId_isSet(false);
    this.parentId = 0;
    this.message = null;
    set_someId_isSet(false);
    this.someId = 0;
  }

  public long get_parentId() {
    return this.parentId;
  }

  public void set_parentId(long parentId) {
    this.parentId = parentId;
    set_parentId_isSet(true);
  }

  public void unset_parentId() {
    __isset_bit_vector.clear(__PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean is_set_parentId() {
    return __isset_bit_vector.get(__PARENTID_ISSET_ID);
  }

  public void set_parentId_isSet(boolean value) {
    __isset_bit_vector.set(__PARENTID_ISSET_ID, value);
  }

  public String get_message() {
    return this.message;
  }

  public void set_message(String message) {
    this.message = message;
  }

  public void unset_message() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean is_set_message() {
    return this.message != null;
  }

  public void set_message_isSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public long get_someId() {
    return this.someId;
  }

  public void set_someId(long someId) {
    this.someId = someId;
    set_someId_isSet(true);
  }

  public void unset_someId() {
    __isset_bit_vector.clear(__SOMEID_ISSET_ID);
  }

  /** Returns true if field someId is set (has been assigned a value) and false otherwise */
  public boolean is_set_someId() {
    return __isset_bit_vector.get(__SOMEID_ISSET_ID);
  }

  public void set_someId_isSet(boolean value) {
    __isset_bit_vector.set(__SOMEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARENT_ID:
      if (value == null) {
        unset_parentId();
      } else {
        set_parentId((Long)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unset_message();
      } else {
        set_message((String)value);
      }
      break;

    case SOME_ID:
      if (value == null) {
        unset_someId();
      } else {
        set_someId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_ID:
      return Long.valueOf(get_parentId());

    case MESSAGE:
      return get_message();

    case SOME_ID:
      return Long.valueOf(get_someId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARENT_ID:
      return is_set_parentId();
    case MESSAGE:
      return is_set_message();
    case SOME_ID:
      return is_set_someId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleThriftStruct)
      return this.equals((SimpleThriftStruct)that);
    return false;
  }

  public boolean equals(SimpleThriftStruct that) {
    if (that == null)
      return false;

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_message = true && this.is_set_message();
    boolean that_present_message = true && that.is_set_message();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_someId = true;
    boolean that_present_someId = true;
    if (this_present_someId || that_present_someId) {
      if (!(this_present_someId && that_present_someId))
        return false;
      if (this.someId != that.someId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_parentId = true;
    builder.append(present_parentId);
    if (present_parentId)
      builder.append(parentId);

    boolean present_message = true && (is_set_message());
    builder.append(present_message);
    if (present_message)
      builder.append(message);

    boolean present_someId = true;
    builder.append(present_someId);
    if (present_someId)
      builder.append(someId);

    return builder.toHashCode();
  }

  public int compareTo(SimpleThriftStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleThriftStruct typedOther = (SimpleThriftStruct)other;

    lastComparison = Boolean.valueOf(is_set_parentId()).compareTo(typedOther.is_set_parentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_parentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_message()).compareTo(typedOther.is_set_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_someId()).compareTo(typedOther.is_set_someId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_someId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.someId, typedOther.someId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleThriftStruct(");
    boolean first = true;

    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("someId:");
    sb.append(this.someId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_parentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentId' is unset! Struct:" + toString());
    }

    if (!is_set_message()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' is unset! Struct:" + toString());
    }

    if (!is_set_someId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'someId' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleThriftStructStandardSchemeFactory implements SchemeFactory {
    public SimpleThriftStructStandardScheme getScheme() {
      return new SimpleThriftStructStandardScheme();
    }
  }

  private static class SimpleThriftStructStandardScheme extends StandardScheme<SimpleThriftStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleThriftStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.set_parentId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.set_message_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.someId = iprot.readI64();
              struct.set_someId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleThriftStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOME_ID_FIELD_DESC);
      oprot.writeI64(struct.someId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleThriftStructTupleSchemeFactory implements SchemeFactory {
    public SimpleThriftStructTupleScheme getScheme() {
      return new SimpleThriftStructTupleScheme();
    }
  }

  private static class SimpleThriftStructTupleScheme extends TupleScheme<SimpleThriftStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleThriftStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.parentId);
      oprot.writeString(struct.message);
      oprot.writeI64(struct.someId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleThriftStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.parentId = iprot.readI64();
      struct.set_parentId_isSet(true);
      struct.message = iprot.readString();
      struct.set_message_isSet(true);
      struct.someId = iprot.readI64();
      struct.set_someId_isSet(true);
    }
  }

}

